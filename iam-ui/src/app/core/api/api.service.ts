import { environment } from '@environments/environment';
/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API
 * 
  <h3>üìå Welcome to the <strong>IAM</strong> üöÄ</h3>
  
 * OpenAPI spec version: 1.0
 */
import {
  HttpClient
} from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http';

import {
  Injectable
} from '@angular/core';

import {
  Observable
} from 'rxjs';

import type {
  AuthorizeParams,
  AuthorizeResponse,
  ConfigurationResponse,
  CreateUserRequest,
  CreateUserResponse,
  DisableUserResponse,
  EnableUserResponse,
  ForgotPasswordRequest,
  ForgotPasswordResponse,
  GetRoleListResponse,
  GetUserListParams,
  GetUserListResponse,
  GetUserResponse,
  GetUserSelfResponse,
  JwksResponse,
  LoginRequest,
  LoginResponse,
  LogoutParams,
  TokenRequest,
  TokenResponse,
  UpdateUserRequest,
  UpdateUserResponse,
  UpdateUserSelfRequest,
  UpdateUserSelfResponse,
  UserInfoResponse
} from './model';

type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class ApiService {
  constructor(
    private http: HttpClient,
  ) {}/**
 * Operation ID: AppController_getHello


 */
 appControllerGetHello<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    appControllerGetHello<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    appControllerGetHello<TData = void>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;appControllerGetHello<TData = void>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `${environment.apiUrl}/`,options
    );
  }

/**
 * Operation ID: updateUserSelf


 */
 updateUserSelf<TData = UpdateUserSelfResponse>(
    updateUserSelfRequest: UpdateUserSelfRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    updateUserSelf<TData = UpdateUserSelfResponse>(
    updateUserSelfRequest: UpdateUserSelfRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    updateUserSelf<TData = UpdateUserSelfResponse>(
    updateUserSelfRequest: UpdateUserSelfRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;updateUserSelf<TData = UpdateUserSelfResponse>(
    updateUserSelfRequest: UpdateUserSelfRequest, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `${environment.apiUrl}/users/me`,
      updateUserSelfRequest,options
    );
  }

/**
 * Operation ID: getUserSelf


 */
 getUserSelf<TData = GetUserSelfResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getUserSelf<TData = GetUserSelfResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getUserSelf<TData = GetUserSelfResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getUserSelf<TData = GetUserSelfResponse>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `${environment.apiUrl}/users/me`,options
    );
  }

/**
 * Operation ID: updateUser


 */
 updateUser<TData = UpdateUserResponse>(
    id: string,
    updateUserRequest: UpdateUserRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    updateUser<TData = UpdateUserResponse>(
    id: string,
    updateUserRequest: UpdateUserRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    updateUser<TData = UpdateUserResponse>(
    id: string,
    updateUserRequest: UpdateUserRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;updateUser<TData = UpdateUserResponse>(
    id: string,
    updateUserRequest: UpdateUserRequest, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `${environment.apiUrl}/users/${id}`,
      updateUserRequest,options
    );
  }

/**
 * Operation ID: getUser


 */
 getUser<TData = GetUserResponse>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getUser<TData = GetUserResponse>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getUser<TData = GetUserResponse>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getUser<TData = GetUserResponse>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `${environment.apiUrl}/users/${id}`,options
    );
  }

/**
 * Operation ID: getUserList


 */
 getUserList<TData = GetUserListResponse>(
    params?: GetUserListParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getUserList<TData = GetUserListResponse>(
    params?: GetUserListParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getUserList<TData = GetUserListResponse>(
    params?: GetUserListParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getUserList<TData = GetUserListResponse>(
    params?: GetUserListParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `${environment.apiUrl}/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Operation ID: createUser


 */
 createUser<TData = CreateUserResponse>(
    createUserRequest: CreateUserRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    createUser<TData = CreateUserResponse>(
    createUserRequest: CreateUserRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    createUser<TData = CreateUserResponse>(
    createUserRequest: CreateUserRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;createUser<TData = CreateUserResponse>(
    createUserRequest: CreateUserRequest, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `${environment.apiUrl}/users`,
      createUserRequest,options
    );
  }

/**
 * Operation ID: getRoleList


 */
 getRoleList<TData = GetRoleListResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    getRoleList<TData = GetRoleListResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    getRoleList<TData = GetRoleListResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;getRoleList<TData = GetRoleListResponse>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `${environment.apiUrl}/roles`,options
    );
  }

/**
 * Operation ID: enableUser


 */
 enableUser<TData = EnableUserResponse>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    enableUser<TData = EnableUserResponse>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    enableUser<TData = EnableUserResponse>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;enableUser<TData = EnableUserResponse>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `${environment.apiUrl}/users/${id}/enable`,undefined,options
    );
  }

/**
 * Operation ID: disableUser


 */
 disableUser<TData = DisableUserResponse>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    disableUser<TData = DisableUserResponse>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    disableUser<TData = DisableUserResponse>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;disableUser<TData = DisableUserResponse>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `${environment.apiUrl}/users/${id}/disable`,undefined,options
    );
  }

/**
 * Operation ID: token


 */
 token<TData = TokenResponse>(
    tokenRequest: TokenRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    token<TData = TokenResponse>(
    tokenRequest: TokenRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    token<TData = TokenResponse>(
    tokenRequest: TokenRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;token<TData = TokenResponse>(
    tokenRequest: TokenRequest, options?: HttpClientOptions
  ): Observable<TData>  {const formUrlEncoded = new URLSearchParams();

    return this.http.post<TData>(
      `${environment.apiUrl}/protocol/openid-connect/token`,
      formUrlEncoded,options
    );
  }

/**
 * Operation ID: logout


 */
 logout<TData = void>(
    params: LogoutParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    logout<TData = void>(
    params: LogoutParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    logout<TData = void>(
    params: LogoutParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;logout<TData = void>(
    params: LogoutParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `${environment.apiUrl}/protocol/openid-connect/logout`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Operation ID: jwks


 */
 jwks<TData = JwksResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    jwks<TData = JwksResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    jwks<TData = JwksResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;jwks<TData = JwksResponse>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `${environment.apiUrl}/.well-known/jwks.json`,options
    );
  }

/**
 * Operation ID: userInfo


 */
 userInfo<TData = UserInfoResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    userInfo<TData = UserInfoResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    userInfo<TData = UserInfoResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;userInfo<TData = UserInfoResponse>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `${environment.apiUrl}/protocol/openid-connect/userinfo`,options
    );
  }

/**
 * Operation ID: configuration


 */
 configuration<TData = ConfigurationResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    configuration<TData = ConfigurationResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    configuration<TData = ConfigurationResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;configuration<TData = ConfigurationResponse>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `${environment.apiUrl}/.well-known/openid-configuration`,options
    );
  }

/**
 * Operation ID: authorize


 */
 authorize<TData = AuthorizeResponse>(
    params: AuthorizeParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    authorize<TData = AuthorizeResponse>(
    params: AuthorizeParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    authorize<TData = AuthorizeResponse>(
    params: AuthorizeParams, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;authorize<TData = AuthorizeResponse>(
    params: AuthorizeParams, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `${environment.apiUrl}/protocol/openid-connect/auth`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Operation ID: login


 */
 login<TData = LoginResponse>(
    loginRequest: LoginRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    login<TData = LoginResponse>(
    loginRequest: LoginRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    login<TData = LoginResponse>(
    loginRequest: LoginRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;login<TData = LoginResponse>(
    loginRequest: LoginRequest, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `${environment.apiUrl}/auth/login`,
      loginRequest,options
    );
  }

/**
 * Operation ID: forgotPassword


 */
 forgotPassword<TData = ForgotPasswordResponse>(
    id: string,
    forgotPasswordRequest: ForgotPasswordRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    forgotPassword<TData = ForgotPasswordResponse>(
    id: string,
    forgotPasswordRequest: ForgotPasswordRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    forgotPassword<TData = ForgotPasswordResponse>(
    id: string,
    forgotPasswordRequest: ForgotPasswordRequest, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;forgotPassword<TData = ForgotPasswordResponse>(
    id: string,
    forgotPasswordRequest: ForgotPasswordRequest, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.put<TData>(
      `${environment.apiUrl}/forgot-password/${id}`,
      forgotPasswordRequest,options
    );
  }

};

export type AppControllerGetHelloClientResult = NonNullable<void>
export type UpdateUserSelfClientResult = NonNullable<UpdateUserSelfResponse>
export type GetUserSelfClientResult = NonNullable<GetUserSelfResponse>
export type UpdateUserClientResult = NonNullable<UpdateUserResponse>
export type GetUserClientResult = NonNullable<GetUserResponse>
export type GetUserListClientResult = NonNullable<GetUserListResponse>
export type CreateUserClientResult = NonNullable<CreateUserResponse>
export type GetRoleListClientResult = NonNullable<GetRoleListResponse>
export type EnableUserClientResult = NonNullable<EnableUserResponse>
export type DisableUserClientResult = NonNullable<DisableUserResponse>
export type TokenClientResult = NonNullable<TokenResponse>
export type LogoutClientResult = NonNullable<void>
export type JwksClientResult = NonNullable<JwksResponse>
export type UserInfoClientResult = NonNullable<UserInfoResponse>
export type ConfigurationClientResult = NonNullable<ConfigurationResponse>
export type AuthorizeClientResult = NonNullable<AuthorizeResponse>
export type LoginClientResult = NonNullable<LoginResponse>
export type ForgotPasswordClientResult = NonNullable<ForgotPasswordResponse>
